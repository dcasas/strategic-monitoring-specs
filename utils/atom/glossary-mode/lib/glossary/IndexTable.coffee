Acronyms       = require './terms/Acronyms'
BusinessTerms  = require './terms/BusinessTerms'
TechnicalTerms = require './terms/TechnicalTerms'

String.prototype.padRight = (l, c) -> this + Array(l - this.length+1).join(c||" ")

module.exports =
class IndexTable

  constructor: (@editor) ->
    @a = new Acronyms(@editor)
    @b = new BusinessTerms(@editor)
    @t = new TechnicalTerms(@editor)
    @global = @_isGlobal()

    _this = @
    @editor.getBuffer().onWillSave () -> _this.update()

  update: (indexTable = @generateIndexTable(), range = [[0,0], [0,0]]) ->
    console.log "Updating glossary terms index table"
    @global = @_isGlobal()
    @terms = {
      "Acronyms"        : if @global is true then @a.getAllTerms() else @a.terms,
      "Business Terms"  : if @global is true then @b.getAllTerms() else @b.terms,
      "Technical Terms" : if @global is true then @t.getAllTerms() else @t.terms,
    }

    @delete()
    @create(indexTable, range)

  create: (indexTable = @generateIndexTable(), range = [[0,0], [0,0]]) ->
    console.log "Creating glossary terms index table"
    @editor.setTextInBufferRange range, indexTable

  delete: ->
    console.log "Deleting glossary terms index table"
    @editor.setTextInBufferRange @getIndexTableRange(), "" if @hasIndexTable() is true


  hasIndexTable: () ->
      [[x, y], [i, j]] = @getIndexTableRange()
      return x isnt false and i isnt false

  getIndexTableRange: () ->
    [x, y, i, j] = [false, false, false, false]

    for l in [0 ... @editor.getLineCount()]
      x = l if @_getLine(l).match /^\s*<!--\s*GLOSSARY:Index\s*(?:global='[^']+')?\s*-->\s*$/g
      i = l if @_getLine(l).match /^\s*<!--\s*\/GLOSSARY:Index\s*-->\s*/g
      break if x isnt false and i isnt false

    y = 0                   if x isnt false
    j = @_getLine(i).length if i isnt false

    return [[x, y], [i, j]]

  generateIndexTable: () ->
    [headers, data] = @_getIndexTable()
    text = []
    text.push "<!-- GLOSSARY:Index global='#{@global}' -->"
    text.push "<!-- Automatically generated by Atom plugin -->"
    text.push @_renderMarkdownTable headers, data
    text.push "<!-- /GLOSSARY:Index -->"
    return text.join "\n"

# ---------------------------

  _getIndexTable: () ->
    data = {}
    headers = {}
    for type in Object.keys(@terms)
      headers[type] = type.length
      @terms[type].forEach (t) ->
          index = t.substring(0,1).toUpperCase()
          data[index]       = {} if data[index]       is undefined
          data[index][type] = [] if data[index][type] is undefined
          data[index][type].push Terms.getReference t
          headers[type] = Math.max(headers[type], data[index][type].join(",").length)
          console.log "Adding #{type}/#{t} term reference to index table"

    return [headers, data]

  _renderMarkdownTable: (headers, data) ->
    text = []
    text.push "|   |" + Object.keys(headers).map( (h) -> h.padRight(headers[h])     ).join("|") + "|"
    text.push "|:-:|" + Object.keys(headers).map( (h) -> "".padRight(headers[h],'-')).join("|") + "|"
    for i in Object.keys(data).sort()
      row = [" #{i} "]
      for h in Object.keys(headers)
        if data[i][h] is undefined
          row.push "".padRight(headers[h])
        else
          row.push data[i][h].join(",").padRight(headers[h])
      text.push "|" + row.join("|") + "|"
    return text.join "\n"

  _isGlobal: () ->
    global = false

    if @hasIndexTable() is true
      console.log "index found"
      for l in [0 ... @editor.getLineCount()]
        if @_getLine(l).match /^\s*<!--\s*GLOSSARY:Index\s*(?:global='([^']+)')?\s*-->\s*$/
          console.log "glossary table matched"
          global = ( @_getLine(l).match(/^\s*<!--\s*GLOSSARY:Index\s*(?:global='([^']+)')?\s*-->\s*$/)[1] == "true" )
          console.log "matched to '#{@_getLine(l).match(/^\s*<!--\s*GLOSSARY:Index\s*(?:global='([^']+)')?\s*-->\s*$/)[1]}'"
          break

    return global

  _getLines: () ->
    if @editor isnt undefined
      return @editor.getBuffer().getLines()
    else
      return []

  _getLine: (row) ->
    if @editor isnt undefined
      return @editor.lineTextForBufferRow(row)
    else
      return []
