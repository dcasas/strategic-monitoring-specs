Acronyms       = require './terms/Acronyms'
BusinessTerms  = require './terms/BusinessTerms'
TechnicalTerms = require './terms/TechnicalTerms'

module.exports =
class TermsLinks

  constructor: (@editor) ->
    @a = new Acronyms(@editor)
    @b = new BusinessTerms(@editor)
    @t = new TechnicalTerms(@editor)

    _this = @
    @editor.getBuffer().onWillSave () -> _this.update()

  update: ->
    console.log "Updating glossary terms links"
    @links = [].concat.apply([], [@a.getAllTermsLinks(), @b.getAllTermsLinks(), @t.getAllTermsLinks()])

    @delete()
    @create()

  create: ->
    r = @editor.getLastBufferRow() # for some strange reason this behave slightly different when cmd+s or the context menu action!
    l = @editor.lineTextForBufferRow(r).length
    if l > 0
      @editor.setTextInBufferRange [[r,l], [r,l]], "\n"
      r = @editor.getLastBufferRow()
      l = @editor.lineTextForBufferRow(r).length

    console.log "Creating glossary terms references #{[[r,l], [r,l]]}"
    @editor.setTextInBufferRange [[r,l], [r,l]], "#{@generateReferences()}"

  delete: ->
    console.log "Deleting glossary terms references #{@_getReferencesRange()}"
    @editor.setTextInBufferRange @_getReferencesRange(), "" if @hasReferences() is true

  generateReferences: () ->
    text = []
    text.push "<!-- GLOSSARY:References -->"
    text.push "<!-- Automatically generated by Atom plugin -->"
    text.push @links.join "\n"
    text.push "<!-- /GLOSSARY:References -->"
    return text.join "\n"


  hasReferences: () ->
    [[x, y], [i, j]] = @_getReferencesRange()
    return x isnt false and i isnt false

# ---------------------------

  _getReferencesRange: () ->
    [x, y, i, j] = [false, false, false, false]

    for l in [@editor.getLineCount()-1 .. 0]
      x = l - 1 if @_getLine(l).match /^\s*<!--\s*GLOSSARY:References\s*-->\s*$/g
      i = l     if @_getLine(l).match /^<!--\s*\/GLOSSARY:References\s*-->\s*$/g
      break if x isnt false and i isnt false

    y = @_getLine(x).length if x isnt false
    j = @_getLine(i).length if i isnt false

    return [[x, y], [i, j]]

  _getLines: () ->
    if @editor isnt undefined
      return @editor.getBuffer().getLines()
    else
      return []

  _getLine: (row) ->
    if @editor isnt undefined
      return @editor.lineTextForBufferRow(row)
    else
      return []
